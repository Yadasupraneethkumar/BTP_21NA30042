import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import seaborn as sns
import matplotlib.pyplot as plt
# from imblearn.over_sampling import SMOTE

# Load the data
data = pd.read_excel('Detailed_Complete_raw.xlsx')
data.head()
data.drop('Time', axis=1, inplace=True)

# Define features and target
X = data[['mpww', 'season', 'TOD']]
y = data['shww']

# Encode categorical variables
categorical_features = ['season', 'TOD']
numerical_features = ['mpww']

preprocessor = ColumnTransformer(
    transformers=[
        ('num', StandardScaler(), numerical_features),
        ('cat', OneHotEncoder(), categorical_features)
    ])



# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Define the model
model = RandomForestRegressor(random_state=42)

# Create a pipeline
pipeline = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('model', model)
])

# Define the parameter grid
param_grid = {
    'model__n_estimators': [100, 200],
    'model__max_depth': [None, 10, 20,30],
    'model__min_samples_split': [2, 5, 10]
}


# Perform grid search
grid_search = GridSearchCV(pipeline, param_grid, cv=5, scoring='neg_mean_absolute_error')
grid_search.fit(X_train, y_train)


# Best model
best_model = grid_search.best_estimator_

# Predictions
y_pred = best_model.predict(X_test)

# Print the best parameters
best_params = grid_search.best_params_
print(f"Best parameters: {best_params}")

# Print the detailed results
print("Best model parameters:")
print(f" - Number of estimators: {best_params['model__n_estimators']}")
print(f" - Maximum depth: {best_params['model__max_depth']}")
print(f" - Minimum samples split: {best_params['model__min_samples_split']}")

# If you want to see all results from the grid search, you can also do this:
cv_results = pd.DataFrame(grid_search.cv_results_)
print(cv_results)

# Evaluation
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'MAE: {mae}')
print(f'MSE: {mse}')
print(f'R2 Score: {r2}')

# Plot actual vs predicted values
plt.figure(figsize=(10, 6))
plt.plot(y_test.values, label='Actual Values', color='blue')
plt.plot(y_pred, label='Predicted Values', color='red')
plt.xlabel('Sample Index')
plt.ylabel('SHWW')
plt.title('Actual vs Predicted Values')
plt.legend()
plt.show()
